{"version":3,"sources":["actions/coordsActions/index.js","actions/index.js","reducers/coordsReducer.js","reducers/yMapsReducer.js","reducers/index.js","store/index.js","components/coordsSetter/CoordsSetter.js","components/coordItem/CoordItem.js","components/listOfCoords/ListOfCoords.js","components/map/StyledComps.js","components/map/Map.js","additionalApi/ApiInitializer.js","actions/yMapsActions/index.js","App.js","serviceWorker.js","index.js"],"names":["addCoord","name","lat","lng","id","uuid","type","CONSTANTS","ADD_COORD","payload","deleteCoord","DELETE_COORD","DND_COORD","INIT_YMAPS_API","EDIT_COORD","initialState","coordsReducer","state","action","newCoord","newState","actionIndex","splice","findIndex","x","slice","startIndex","endIndex","removed","map","coord","yMapsReducer","yMapsApi","combineReducers","coords","yMaps","store","createStore","rootReducer","CoordsSetter","memo","dispatch","useState","coordName","setCoordName","setLng","setLat","onSubmit","event","a","preventDefault","geocodePlace","gcoordName","glat","glng","decodeError","result","returnResult","res","firstGeoObject","geoObjects","get","getAddressLine","resultCoords","geometry","getCoordinates","geocode","then","onChange","target","value","placeholder","isNaN","connect","CoordItem","onClick","ListOfCoords","onDragEnd","destination","source","index","droppableId","provided","droppableProps","ref","innerRef","key","draggableId","draggableProps","dragHandleProps","YMap","styled","div","Map","setMap","useEffect","center","zoom","controls","routes","onDragEndCoord","newCoords","originalEvent","editCoord","toYandexRoutes","route","length","points","getWayPoints","i","options","set","balloonContentLayout","templateLayoutFactory","createClass","events","add","e","getLength","editor","start","addViaPoints","removeAll","setCenter","error","alert","message","undefined","ApiInitializer","this","ymaps","load","maps","catch","console","log","App","initYMaps","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister"],"mappings":"iNAGaA,EAAW,SAACC,EAAMC,EAAKC,GAChC,IAAMC,EAAKC,MACX,MAAO,CACHC,KAAMC,EAAUC,UAChBC,QAAS,CAAEL,KAAIH,OAAMC,MAAKC,SAWrBO,EAAc,SAACN,GACxB,MAAO,CACHE,KAAMC,EAAUI,aAChBF,QAAS,CAAEL,QClBNG,EAAY,CACrBC,UAAW,YACXG,aAAc,eACdC,UAAW,YACXC,eAAgB,iBAChBC,WAAY,cCNVC,EAAe,GAiDNC,EA/CO,WAAmC,IAAlCC,EAAiC,uDAAzBF,EAAcG,EAAW,uCACpD,OAAQA,EAAOZ,MACX,KAAKC,EAAUC,UAAY,IAAD,EACSU,EAAOT,QAA9BL,EADc,EACdA,GAAIH,EADU,EACVA,KAAMC,EADI,EACJA,IAAKC,EADD,EACCA,IACjBgB,EAAW,CACblB,OACAC,MACAC,MACAC,MAEJ,MAAM,GAAN,mBAAWa,GAAX,CAAkBE,IAEtB,KAAKZ,EAAUI,aAAe,IAClBP,EAAOc,EAAOT,QAAdL,GACFgB,EAAQ,YAAOH,GACfI,EAAcD,EAASE,OAAOF,EAASG,UAAU,SAAAC,GAAC,OAAIA,EAAEpB,KAAOA,IAAK,GAC1E,MAAM,GAAN,mBAAWgB,EAASK,MAAM,EAAGJ,IAA7B,YAA8CD,EAASK,MAAMJ,EAAc,KAE/E,KAAKd,EAAUK,UAAY,IAAD,EACWM,EAAOT,QAAhCiB,EADc,EACdA,WAAYC,EADE,EACFA,SACpB,GAAID,IAAeC,EAAU,CACzB,IAAMP,EAAQ,YAAOH,GADI,EAEPG,EAASE,OAAOI,EAAY,GAFrB,mBAElBE,EAFkB,KAIzB,OADAR,EAASE,OAAOK,EAAU,EAAGC,GACtBR,EAEP,OAAOH,EAGf,KAAKV,EAAUO,WAAa,IAAD,EACQI,EAAOT,QAA9BL,EADe,EACfA,GAAIH,EADW,EACXA,KAAMC,EADK,EACLA,IAAKC,EADA,EACAA,IACjBiB,EAAQ,YAAOH,GACrB,OAAOG,EAASS,IAAI,SAAAC,GAMhB,OALIA,EAAM1B,KAAOA,IACb0B,EAAM7B,KAAOA,EACb6B,EAAM5B,IAAMA,EACZ4B,EAAM3B,IAAMA,GAET2B,IAGf,QACI,OAAOb,IC9BJc,EAZM,WAAmC,IAAlCd,EAAiC,uDAFlC,KAEuBC,EAAW,uCACnD,OAAQA,EAAOZ,MACX,KAAKC,EAAUM,eAAiB,IACpBmB,EAAad,EAAOT,QAApBuB,SACR,OAAOA,EAEX,QACI,OAAOf,ICPJgB,cAAgB,CAC3BC,OAAQlB,EACRmB,MAAOJ,ICDIK,EAFDC,YAAYC,G,iCCCpBC,EAAeC,eAAK,YAA0B,IAAvBC,EAAsB,EAAtBA,SAAUN,EAAY,EAAZA,MAAY,EACbO,mBAAS,IADI,mBACxCC,EADwC,KAC7BC,EAD6B,OAEzBF,mBAAS,IAFgB,mBAExCvC,EAFwC,KAEnC0C,EAFmC,OAGzBH,mBAAS,IAHgB,mBAGxCxC,EAHwC,KAGnC4C,EAHmC,KA2BzCC,EAAQ,sCAAG,WAAMC,GAAN,qBAAAC,EAAA,4DACbD,EAAME,iBANNN,EAAa,IACbE,EAAO,IACPD,EAAO,IAGM,SAGyCM,EAAaR,EAAWzC,EAAKC,GAHtE,gBAGLiD,EAHK,EAGLA,WAAYC,EAHP,EAGOA,KAAMC,EAHb,EAGaA,KAHb,EAGmBC,aAE5Bd,EAASzC,EAASoD,EAAYC,EAAMC,IAL3B,0CAAH,sDASRH,EAAY,sCAAG,WAAOR,EAAWzC,EAAKC,GAAvB,iBAAA8C,EAAA,qDACXO,EAAS,CAAEJ,WAAYT,EAAWU,KAAMnD,EAAKoD,KAAMnD,GACnDsD,EAAe,SAAAC,GACjB,IAAMC,EAAiBD,EAAIE,WAAWC,IAAI,GAC1C,GAAIF,EAAgB,CAChB,IAAM1D,EAAO0D,EAAeG,iBACtBC,EAAeJ,EAAeK,SAASC,iBAC7CT,EAAOJ,WAAanD,EACpBuD,EAAOH,KAAOU,EAAa,GAC3BP,EAAOF,KAAOS,EAAa,QAE3BP,EAAOD,aAAc,GAXZ,MAcT,EAdS,eAeC,KAARrD,GAAsB,KAARC,GAfP,UAmBM,KAAdwC,GAnBQ,kCAgBHR,EAAM+B,QAAQ,CAAChE,EAAKC,IAAMgE,KAAKV,GAhB5B,2DAoBHtB,EAAM+B,QAAQvB,GAAWwB,KAAKV,GApB3B,6EA2BVD,GA3BU,0CAAH,0DA8BlB,OACI,0BAAMT,SAAUA,GACZ,+GACA,2BAAOqB,SAhEe,SAAApB,GAC1BJ,EAAaI,EAAMqB,OAAOC,QA+DkBA,MAAO3B,EAAW4B,YAAY,oFACtE,0EACA,2BAAOH,SA9DS,SAAApB,GACfwB,MAAMxB,EAAMqB,OAAOC,QACpBzB,EAAOG,EAAMqB,OAAOC,QA4DcA,MAAOnE,EAAKoE,YAAY,+CAC1D,oEACA,2BAAOH,SA1DS,SAAApB,GACfwB,MAAMxB,EAAMqB,OAAOC,QACpBxB,EAAOE,EAAMqB,OAAOC,QAwDcA,MAAOpE,EAAKqE,YAAY,yCAC1D,6BACA,6BACA,2BAAOjE,KAAK,SAASgE,MAAM,qHASxBG,cAJS,SAAAxD,GAAK,MAAK,CAC9BkB,MAAOlB,EAAMkB,QAGFsC,CAAyBlC,GCrFlCmC,EAAYlC,eAAK,YAAuC,IAApCC,EAAmC,EAAnCA,SAAUxC,EAAyB,EAAzBA,KAAME,EAAmB,EAAnBA,IAAKD,EAAc,EAAdA,IAAKE,EAAS,EAATA,GAMhD,OACI,6BACI,6DAAgBH,EAAhB,wDAAiCE,EAAjC,mDAAiDD,IACjD,4BAAQyE,QAPK,WACjBlC,EAAS/B,EAAYN,MAMjB,iDAKGqE,gBAAUC,G,QCZnBE,EAAepC,eAAK,YAA2B,IAAxBN,EAAuB,EAAvBA,OAAQO,EAAe,EAAfA,SAUjC,OACI,kBAAC,IAAD,CAAiBoC,UAVH,SAACrB,GRkBC,IAAC9B,EAAYC,EQjBxB6B,EAAOsB,aAGZrC,GRciBf,EQbb8B,EAAOuB,OAAOC,MRaWrD,EQZzB6B,EAAOsB,YAAYE,MRapB,CACH1E,KAAMC,EAAUK,UAChBH,QAAS,CAAEiB,aAAYC,iBQVnB,kBAAC,IAAD,CAAWsD,YAAY,aAClB,SAACC,GAAD,OACG,yCACQA,EAASC,eADjB,CAEIC,IAAKF,EAASG,WAEbnD,EAAOL,IAAI,SAACC,EAAOkD,GAAR,OACR,kBAAC,IAAD,CAAWM,IAAKxD,EAAM1B,GAAImF,YAAazD,EAAM1B,GAAI4E,MAAOA,GACnD,SAACE,GAAD,OACG,uCACIE,IAAKF,EAASG,UACVH,EAASM,eACTN,EAASO,iBAEb,kBAAC,EAAD,CACIH,IAAKxD,EAAM1B,GACXH,KAAM6B,EAAM7B,KACZC,IAAK4B,EAAM5B,IACXC,IAAK2B,EAAM3B,IACXC,GAAI0B,EAAM1B,UAM7B8E,EAASX,kBAYnBE,cAJS,SAAAxD,GAAK,MAAK,CAC9BiB,OAAQjB,EAAMiB,SAGHuC,CAAyBG,G,oHCrDjC,IAAMc,E,MAAOC,EAAOC,IAAV,KCGXC,EAAMrD,eAAK,YAAkC,IAA/BN,EAA8B,EAA9BA,OAAQC,EAAsB,EAAtBA,MAAOM,EAAe,EAAfA,SAAe,EAExBC,mBAAS,MAFe,mBAEvCb,EAFuC,KAElCiE,EAFkC,KAI9CC,oBAAU,WACDlE,GACDiE,EAAO3D,EACH,IAAIA,EAAM0D,IAAI,MAAO,CACjBG,OAAQ,CAAC,MAAO,OAChBC,KAAM,EACNC,SAAU,KAEd,OAGT,CAAC/D,EAAON,IAEX,IAAsBsE,EAqChBC,EAAiB,SAAChG,EAAI4C,GACxB,IAAMqD,EAAYrD,EAAMsD,cAAcjC,OAAOL,SAASC,iBACtD9B,EAAM+B,QAAQmC,GAAWlC,KAAK,SAACT,GAC3B,IAAMC,EAAiBD,EAAIE,WAAWC,IAAI,GACpC5D,EAAO0D,EAAeG,iBACtBC,EAAeJ,EAAeK,SAASC,iBAC7CxB,EVtDa,SAACrC,EAAIH,EAAMC,EAAKC,GACrC,MAAO,CACHG,KAAMC,EAAUO,WAChBL,QAAS,CAAEL,KAAIH,OAAMC,MAAKC,QUmDboG,CAAUnG,EAAIH,EAAM8D,EAAa,GAAIA,EAAa,QAI7DyC,EAAiB,SAACL,GAEpB,OADeA,EAAOtE,IAAI,SAAA4E,GAAK,MAAI,EAAEA,EAAMtG,KAAMsG,EAAMvG,QAI3D,OACI,6BACI,kBAACwF,EAAD,CAAMtF,GAAG,MAAMkF,IAAI,QAClBzD,QAvDasE,EAuDMjE,GAtDbwE,OAAS,EAChBvE,EAAMsE,MAAMD,EAAeL,IAAShC,KAChC,SAAAsC,GAEI,IADA,IAAME,EAASF,EAAMG,eADhB,WAEIC,GACL1E,EAAM+B,QAAQyC,EAAO9C,IAAIgD,GAAG7C,SAASC,kBAAkBE,KAAK,SAAAT,GACxDiD,EAAO9C,IAAIgD,GAAGC,QAAQC,IAAI,CACtBC,qBAAsB7E,EAAM8E,sBAAsBC,YAA5B,gBACTxD,EAAIE,WAAWC,IAAI,GAAGC,iBADb,gBAK9B6C,EAAO9C,IAAIgD,GAAGM,OAAOC,IAAI,UAAW,SAACC,GAAD,OAAOjB,EAAeD,EAAOU,GAAGzG,GAAIiH,MARnER,EAAI,EAAGA,EAAIF,EAAOW,YAAaT,IAAM,EAArCA,GAUTJ,EAAMc,OAAOC,MAAM,CAAEC,cAAc,IACnC5F,EAAI+B,WAAW8D,YACf7F,EAAI+B,WAAWwD,IAAIX,GACJtE,EAAM+B,QAAQsC,EAAeL,GAAQA,EAAOO,OAAS,IAC3DvC,KAAK,SAAAT,GACV7B,EAAI8F,UACAjE,EAAIE,WAAWC,IAAI,GAAGG,SAASC,iBAC/B,MAKZ,SAAA2D,GACInF,EAAS/B,EAAYyF,EAAOA,EAAOO,OAAS,GAAGtG,KAC/CyH,MAAM,UAAYD,EAAME,WAIhCjG,EAAI+B,WAAW8D,kBAsBeK,KAU3BtD,cALS,SAAAxD,GAAK,MAAK,CAC9BiB,OAAQjB,EAAMiB,OACdC,MAAOlB,EAAMkB,QAGFsC,CAAyBoB,G,wBCvEzBmC,E,WAZX,WAAYvF,GAAW,oBACnBwF,KAAKxF,SAAWA,E,wDAGP,IAAD,OACRyF,IACKC,KAAK,0FACLhE,KAAK,SAAAiE,GAAI,OAAI,EAAK3F,UCRFT,EDQwBoG,ECP1C,CACH9H,KAAMC,EAAUM,eAChBJ,QAAS,CAAEuB,eAHS,IAACA,IDShBqG,MAAM,SAAAT,GAAK,OAAIU,QAAQC,IAAI,6BAA8BX,S,KELhEY,EAAMhG,eAAK,YAAmB,IAAhBC,EAAe,EAAfA,SAOlB,OALAsD,oBAAU,WACe,IAAIiC,EAAevF,GAC3BgG,aACd,CAAChG,IAGF,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,kBAAC,EAAD,SAKSgC,gBAAU+D,GCXLE,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCVNC,IAASC,OACL,kBAAC,IAAD,CAAU5G,MAAOA,GACb,kBAAC,EAAD,OAEF6G,SAASC,eAAe,SDqHxB,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMlF,KAAK,SAAAmF,GACjCA,EAAaC,gB","file":"static/js/main.c051f76f.chunk.js","sourcesContent":["import { CONSTANTS } from '../../actions';\r\nimport uuid from 'uuidv4';\r\n\r\nexport const addCoord = (name, lat, lng) => {\r\n    const id = uuid();\r\n    return {\r\n        type: CONSTANTS.ADD_COORD,\r\n        payload: { id, name, lat, lng }\r\n    };\r\n}\r\n\r\nexport const editCoord = (id, name, lat, lng) => {\r\n    return {\r\n        type: CONSTANTS.EDIT_COORD,\r\n        payload: { id, name, lat, lng }\r\n    }\r\n}\r\n\r\nexport const deleteCoord = (id) => {\r\n    return {\r\n        type: CONSTANTS.DELETE_COORD,\r\n        payload: { id }\r\n    };\r\n}\r\n\r\nexport const dndCoord = (startIndex, endIndex) => {\r\n    return {\r\n        type: CONSTANTS.DND_COORD,\r\n        payload: { startIndex, endIndex }\r\n    };\r\n}","export * from './coordsActions';\r\nexport * from './yMapsActions';\r\n\r\nexport const CONSTANTS = {\r\n    ADD_COORD: 'ADD_COORD',\r\n    DELETE_COORD: 'DELETE_COORD',\r\n    DND_COORD: 'DND_COORD',\r\n    INIT_YMAPS_API: 'INIT_YMAPS_API',\r\n    EDIT_COORD: 'EDIT_COORD'\r\n}","import { CONSTANTS } from '../actions';\r\n\r\nconst initialState = [];\r\n\r\nconst coordsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_COORD: {\r\n            const { id, name, lat, lng } = action.payload;\r\n            const newCoord = {\r\n                name,\r\n                lat,\r\n                lng,\r\n                id\r\n            }\r\n            return [...state, newCoord];\r\n        }\r\n        case CONSTANTS.DELETE_COORD: {\r\n            const { id } = action.payload;\r\n            const newState = [...state];\r\n            const actionIndex = newState.splice(newState.findIndex(x => x.id === id), 1);\r\n            return [...newState.slice(0, actionIndex), ...newState.slice(actionIndex + 1)];\r\n        }\r\n        case CONSTANTS.DND_COORD: {\r\n            const { startIndex, endIndex } = action.payload;\r\n            if (startIndex !== endIndex) {\r\n                const newState = [...state];\r\n                const [removed] = newState.splice(startIndex, 1);\r\n                newState.splice(endIndex, 0, removed);\r\n                return newState;\r\n            } else {\r\n                return state;\r\n            }\r\n        }\r\n        case CONSTANTS.EDIT_COORD: {\r\n            const { id, name, lat, lng } = action.payload;\r\n            const newState = [...state];\r\n            return newState.map(coord => {\r\n                if (coord.id === id) {\r\n                    coord.name = name;\r\n                    coord.lat = lat;\r\n                    coord.lng = lng;\r\n                }\r\n                return coord;\r\n            });\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default coordsReducer;","import { CONSTANTS } from '../actions';\r\n\r\nconst initialState = null;\r\n\r\nconst yMapsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.INIT_YMAPS_API: {\r\n            const { yMapsApi } = action.payload;\r\n            return yMapsApi;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default yMapsReducer;","import { combineReducers } from 'redux';\r\nimport coordsReducer from './coordsReducer';\r\nimport yMapsReducer from './yMapsReducer';\r\n\r\nexport default combineReducers({\r\n    coords: coordsReducer,\r\n    yMaps: yMapsReducer\r\n});","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers'\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React, { useState, memo } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { addCoord } from '../../actions';\r\n\r\nconst CoordsSetter = memo(({ dispatch, yMaps }) => {\r\n    const [coordName, setCoordName] = useState('');\r\n    const [lng, setLng] = useState('');\r\n    const [lat, setLat] = useState('');\r\n\r\n    const handleChangeCoordName = event => {\r\n        setCoordName(event.target.value);\r\n    }\r\n\r\n    const handleChangeLng = event => {\r\n        if (!isNaN(event.target.value)) {\r\n            setLng(event.target.value);\r\n        }\r\n    }\r\n\r\n    const handleChangeLat = event => {\r\n        if (!isNaN(event.target.value)) {\r\n            setLat(event.target.value);\r\n        }\r\n    }\r\n\r\n    const clearAllFields = () => {\r\n        setCoordName('');\r\n        setLat('');\r\n        setLng('');\r\n    }\r\n\r\n    const onSubmit = async event => {\r\n        event.preventDefault();\r\n        clearAllFields();\r\n        const { gcoordName, glat, glng, decodeError } = await geocodePlace(coordName, lat, lng);\r\n        if (!decodeError) {\r\n            dispatch(addCoord(gcoordName, glat, glng));\r\n        }\r\n    }\r\n\r\n    const geocodePlace = async (coordName, lat, lng) => {\r\n        const result = { gcoordName: coordName, glat: lat, glng: lng };\r\n        const returnResult = res => {\r\n            const firstGeoObject = res.geoObjects.get(0);\r\n            if (firstGeoObject) {\r\n                const name = firstGeoObject.getAddressLine();\r\n                const resultCoords = firstGeoObject.geometry.getCoordinates();\r\n                result.gcoordName = name;\r\n                result.glat = resultCoords[1];\r\n                result.glng = resultCoords[0];\r\n            } else {\r\n                result.decodeError = true;\r\n            }\r\n        }\r\n        switch (true) {\r\n            case (lat !== '' && lng !== ''): {\r\n                await yMaps.geocode([lat, lng]).then(returnResult);\r\n                break;\r\n            }\r\n            case coordName !== '': {\r\n                await yMaps.geocode(coordName).then(returnResult);\r\n                break;\r\n            }\r\n            default: {\r\n                break;\r\n            }\r\n        }\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <p>Имя координаты:</p>\r\n            <input onChange={handleChangeCoordName} value={coordName} placeholder=\"Имя координаты\" />\r\n            <p>Долгота:</p>\r\n            <input onChange={handleChangeLng} value={lng} placeholder=\"Долгота\"></input>\r\n            <p>Широта:</p>\r\n            <input onChange={handleChangeLat} value={lat} placeholder=\"Широта\"></input>\r\n            <br />\r\n            <br />\r\n            <input type=\"submit\" value=\"Добавить координату\" />\r\n        </form>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    yMaps: state.yMaps\r\n});\r\n\r\nexport default connect(mapStateToProps)(CoordsSetter);","import React, { memo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteCoord } from '../../actions';\r\n\r\nconst CoordItem = memo(({ dispatch, name, lng, lat, id }) => {\r\n\r\n    const onDeleteItem = () => {\r\n        dispatch(deleteCoord(id));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label>{`Имя: ${name}; долгота:${lng}; широта: ${lat}`}</ label>\r\n            <button onClick={onDeleteItem}>Удалить</button>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default connect()(CoordItem);","import React, { memo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CoordItem } from '../coordItem';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { dndCoord } from '../../actions';\r\n\r\nconst ListOfCoords = memo(({ coords, dispatch }) => {\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        dispatch(dndCoord(\r\n            result.source.index,\r\n            result.destination.index\r\n        ));\r\n    }\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {(provided) => (\r\n                    <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        {coords.map((coord, index) => (\r\n                            <Draggable key={coord.id} draggableId={coord.id} index={index}>\r\n                                {(provided) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                    >\r\n                                        <CoordItem\r\n                                            key={coord.id}\r\n                                            name={coord.name}\r\n                                            lat={coord.lat}\r\n                                            lng={coord.lng}\r\n                                            id={coord.id}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    coords: state.coords\r\n});\r\n\r\nexport default connect(mapStateToProps)(ListOfCoords);","import styled from 'styled-components';\r\n\r\nexport const YMap = styled.div`\r\n    width: 80%;\r\n    height: 100vh;\r\n`","import React, { useEffect, useState, memo } from 'react';\r\nimport { YMap } from './StyledComps';\r\nimport { connect } from 'react-redux';\r\nimport { editCoord, deleteCoord } from '../../actions';\r\n\r\nconst Map = memo(({ coords, yMaps, dispatch }) => {\r\n\r\n    const [map, setMap] = useState(null);\r\n\r\n    useEffect(() => {\r\n        if (!map) {\r\n            setMap(yMaps ?\r\n                new yMaps.Map('map', {\r\n                    center: [55.76, 37.64],\r\n                    zoom: 7,\r\n                    controls: []\r\n                }) :\r\n                null\r\n            );\r\n        }\r\n    }, [yMaps, map]);\r\n\r\n    const renderRoutes = (routes) => {\r\n        if (routes.length > 1) {\r\n            yMaps.route(toYandexRoutes(routes)).then(\r\n                route => {\r\n                    const points = route.getWayPoints();\r\n                    for (let i = 0; i < points.getLength(); i++) {\r\n                        yMaps.geocode(points.get(i).geometry.getCoordinates()).then(res => {\r\n                            points.get(i).options.set({\r\n                                balloonContentLayout: yMaps.templateLayoutFactory.createClass(\r\n                                    `<span>${res.geoObjects.get(0).getAddressLine()}</span>`\r\n                                )\r\n                            });\r\n                        });\r\n                        points.get(i).events.add('dragend', (e) => onDragEndCoord(routes[i].id, e));\r\n                    }\r\n                    route.editor.start({ addViaPoints: false });\r\n                    map.geoObjects.removeAll();\r\n                    map.geoObjects.add(route);\r\n                    var geocoder = yMaps.geocode(toYandexRoutes(routes)[routes.length - 1]);\r\n                    geocoder.then(res => {\r\n                        map.setCenter(\r\n                            res.geoObjects.get(0).geometry.getCoordinates(),\r\n                            7\r\n                        );\r\n                    });\r\n                },\r\n\r\n                error => {\r\n                    dispatch(deleteCoord(routes[routes.length - 1].id));\r\n                    alert('error: ' + error.message);\r\n                }\r\n            );\r\n        } else {\r\n            map.geoObjects.removeAll();\r\n        }\r\n    }\r\n\r\n    const onDragEndCoord = (id, event) => {\r\n        const newCoords = event.originalEvent.target.geometry.getCoordinates();\r\n        yMaps.geocode(newCoords).then((res) => {\r\n            const firstGeoObject = res.geoObjects.get(0);\r\n            const name = firstGeoObject.getAddressLine();\r\n            const resultCoords = firstGeoObject.geometry.getCoordinates();\r\n            dispatch(editCoord(id, name, resultCoords[1], resultCoords[0]));\r\n        });\r\n    }\r\n\r\n    const toYandexRoutes = (routes) => {\r\n        const result = routes.map(route => [+route.lng, +route.lat]);\r\n        return result;\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <YMap id=\"map\" key=\"map\" />\r\n            {map ? renderRoutes(coords) : undefined}\r\n        </div>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    coords: state.coords,\r\n    yMaps: state.yMaps\r\n});\r\n\r\nexport default connect(mapStateToProps)(Map);","import { initYMapsApi } from '../actions';\r\nimport ymaps from 'ymaps';\r\n\r\nclass ApiInitializer {\r\n    constructor(dispatch) {\r\n        this.dispatch = dispatch;\r\n    }\r\n\r\n    initYMaps() {\r\n        ymaps\r\n            .load('https://api-maps.yandex.ru/2.1/?apikey=ec0ad35b-0d65-48bb-aff9-8343ba56b035&lang=en_US')\r\n            .then(maps => this.dispatch(initYMapsApi(maps)))\r\n            .catch(error => console.log('Failed to load Yandex Maps', error));\r\n    }\r\n}\r\n\r\nexport default ApiInitializer;","import { CONSTANTS } from '../../actions';\r\n\r\n\r\nexport const initYMapsApi = (yMapsApi) => {\r\n    return {\r\n        type: CONSTANTS.INIT_YMAPS_API,\r\n        payload: { yMapsApi }\r\n    };\r\n}\r\n","import React, { memo, useEffect } from 'react';\r\nimport { CoordsSetter } from './components/coordsSetter'\r\nimport { ListOfCoords } from './components/listOfCoords';\r\nimport { Map } from './components/map';\r\nimport { connect } from 'react-redux';\r\nimport { ApiInitializer } from './additionalApi';\r\n\r\nconst App = memo(({ dispatch }) => {\r\n\r\n  useEffect(() => {\r\n    const apiInitializer = new ApiInitializer(dispatch);\r\n    apiInitializer.initYMaps();\r\n  }, [dispatch]);\r\n\r\n  return (\r\n    <div>\r\n      <CoordsSetter />\r\n      <ListOfCoords />\r\n      <Map />\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default connect()(App);\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}