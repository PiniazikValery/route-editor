{"version":3,"sources":["actions/index.js","reducers/coordsReducer.js","reducers/index.js","store/index.js","components/coordsSetter/CoordsSetter.js","actions/coordsActions/index.js","components/coordItem/CoordItem.js","components/listOfCoords/ListOfCoords.js","App.js","serviceWorker.js","index.js"],"names":["CONSTANTS","ADD_COORD","DELETE_COORD","DND_COORD","initialState","coordsReducer","state","action","type","payload","id","name","lat","lng","newCoord","newState","actionIndex","splice","findIndex","x","slice","startIndex","endIndex","removed","combineReducers","coords","store","createStore","rootReducer","CoordsSetter","memo","dispatch","useState","coordName","setCoordName","setLng","setLat","onSubmit","event","uuid","addCoord","preventDefault","onChange","target","value","placeholder","isNaN","connect","CoordItem","onClick","deleteCoord","ListOfCoords","onDragEnd","result","destination","source","index","droppableId","provided","droppableProps","ref","innerRef","map","coord","key","draggableId","draggableProps","dragHandleProps","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.0211e3b9.chunk.js","sourcesContent":["export * from './coordsActions';\r\n\r\nexport const CONSTANTS = {\r\n    ADD_COORD: 'ADD_COORD',\r\n    DELETE_COORD: 'DELETE_COORD',\r\n    DND_COORD: 'DND_COORD'\r\n}","import { CONSTANTS } from '../actions';\r\n\r\nconst initialState = [];\r\n\r\nconst coordsReducer = (state = initialState, action) => {\r\n    switch (action.type) {\r\n        case CONSTANTS.ADD_COORD: {\r\n            const { id, name, lat, lng } = action.payload;\r\n            const newCoord = {\r\n                name,\r\n                lat,\r\n                lng,\r\n                id\r\n            }\r\n            return [...state, newCoord];\r\n        }\r\n        case CONSTANTS.DELETE_COORD: {\r\n            const { id } = action.payload;\r\n            const newState = state;\r\n            const actionIndex = newState.splice(newState.findIndex(x => x.id === id), 1);\r\n            return [...newState.slice(0, actionIndex), ...newState.slice(actionIndex + 1)];\r\n        }\r\n        case CONSTANTS.DND_COORD: {\r\n            const { startIndex, endIndex } = action.payload;\r\n            const newState = state;\r\n            const [removed] = newState.splice(startIndex, 1);\r\n            newState.splice(endIndex, 0, removed);\r\n            return newState;\r\n        }\r\n        default: {\r\n            return state;\r\n        }\r\n    }\r\n}\r\n\r\nexport default coordsReducer;","import { combineReducers } from 'redux';\r\nimport coordsReducer from './coordsReducer';\r\n\r\nexport default combineReducers({\r\n    coords: coordsReducer\r\n});","import { createStore } from 'redux';\r\nimport rootReducer from '../reducers'\r\n\r\nconst store = createStore(rootReducer);\r\n\r\nexport default store;","import React, { useState, memo } from 'react';\r\nimport { connect } from \"react-redux\";\r\nimport { addCoord } from '../../actions'\r\n\r\nconst CoordsSetter = memo(({ dispatch }) => {\r\n    const [coordName, setCoordName] = useState('');\r\n    const [lng, setLng] = useState('');\r\n    const [lat, setLat] = useState('');\r\n\r\n    const handleChangeCoordName = event => {\r\n        setCoordName(event.target.value);\r\n    }\r\n\r\n    const handleChangeLng = event => {\r\n        if (!isNaN(event.target.value)) {\r\n            setLng(event.target.value);\r\n        }\r\n    }\r\n\r\n    const handleChangeLat = event => {\r\n        if (!isNaN(event.target.value)) {\r\n            setLat(event.target.value);\r\n        }\r\n    }\r\n\r\n    const onSubmit = event => {\r\n        dispatch(addCoord(coordName, lat, lng));\r\n        event.preventDefault();\r\n    }\r\n\r\n    return (\r\n        <form onSubmit={onSubmit}>\r\n            <p>Имя координаты:</p>\r\n            <input onChange={handleChangeCoordName} value={coordName} placeholder=\"Имя координаты\" />\r\n            <p>Долгота:</p>\r\n            <input onChange={handleChangeLng} value={lng} placeholder=\"Долгота\"></input>\r\n            <p>Широта:</p>\r\n            <input onChange={handleChangeLat} value={lat} placeholder=\"Широта\"></input>\r\n            <br />\r\n            <br />\r\n            <input type=\"submit\" value=\"Добавить координату\" />\r\n        </form>\r\n    );\r\n});\r\n\r\nexport default connect()(CoordsSetter);","import { CONSTANTS } from '../../actions'\r\nimport uuid from 'uuidv4';\r\n\r\nexport const addCoord = (name, lat, lng) => {\r\n    const id = uuid();\r\n    return {\r\n        type: CONSTANTS.ADD_COORD,\r\n        payload: { id, name, lat, lng }\r\n    };\r\n}\r\n\r\nexport const deleteCoord = (id) => {\r\n    return {\r\n        type: CONSTANTS.DELETE_COORD,\r\n        payload: { id }\r\n    };\r\n}\r\n\r\nexport const dndCoord = (startIndex, endIndex) => {\r\n    return {\r\n        type: CONSTANTS.DND_COORD,\r\n        payload: { startIndex, endIndex }\r\n    };\r\n}","import React, { memo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { deleteCoord } from '../../actions';\r\n\r\nconst CoordItem = memo(({ dispatch, name, lng, lat, id }) => {\r\n\r\n    const onDeleteItem = () => {\r\n        dispatch(deleteCoord(id));\r\n    }\r\n\r\n    return (\r\n        <div>\r\n            <label>{`Имя: ${name}; долгота:${lng}; широта: ${lat}`}</ label>\r\n            <button onClick={onDeleteItem}>Удалить</button>\r\n        </div>\r\n    );\r\n});\r\n\r\nexport default connect()(CoordItem);","import React, { memo } from 'react';\r\nimport { connect } from 'react-redux';\r\nimport { CoordItem } from '../coordItem';\r\nimport { DragDropContext, Droppable, Draggable } from \"react-beautiful-dnd\";\r\nimport { dndCoord } from '../../actions';\r\n\r\nconst ListOfCoords = memo(({ coords, dispatch }) => {\r\n    const onDragEnd = (result) => {\r\n        if (!result.destination) {\r\n            return;\r\n        }\r\n        dispatch(dndCoord(\r\n            result.source.index,\r\n            result.destination.index\r\n        ));\r\n    }\r\n    return (\r\n        <DragDropContext onDragEnd={onDragEnd}>\r\n            <Droppable droppableId=\"droppable\">\r\n                {(provided) => (\r\n                    <div\r\n                        {...provided.droppableProps}\r\n                        ref={provided.innerRef}\r\n                    >\r\n                        {coords.map((coord, index) => (\r\n                            <Draggable key={coord.id} draggableId={coord.id} index={index}>\r\n                                {(provided) => (\r\n                                    <div\r\n                                        ref={provided.innerRef}\r\n                                        {...provided.draggableProps}\r\n                                        {...provided.dragHandleProps}\r\n                                    >\r\n                                        <CoordItem\r\n                                            key={coord.id}\r\n                                            name={coord.name}\r\n                                            lat={coord.lat}\r\n                                            lng={coord.lng}\r\n                                            id={coord.id}\r\n                                        />\r\n                                    </div>\r\n                                )}\r\n                            </Draggable>\r\n                        ))}\r\n                        {provided.placeholder}\r\n                    </div>\r\n                )}\r\n            </Droppable>\r\n        </DragDropContext>\r\n    );\r\n});\r\n\r\nconst mapStateToProps = state => ({\r\n    coords: state.coords\r\n});\r\n\r\nexport default connect(mapStateToProps)(ListOfCoords);","import React from 'react';\r\nimport { CoordsSetter } from './components/coordsSetter'\r\nimport { ListOfCoords } from './components/listOfCoords';\r\n\r\nfunction App() {\r\n  return (\r\n    <div>\r\n      <CoordsSetter />\r\n      <ListOfCoords />\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport { Provider } from 'react-redux';\r\nimport store from './store';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nReactDOM.render(\r\n    <Provider store={store}>\r\n        <App />\r\n    </Provider>\r\n    , document.getElementById('root'));\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}